name: Deploy to AWS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/data-plumber

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install frontend dependencies
      run: cd frontend && npm install

    - name: Build frontend
      run: cd frontend && npm run build

    - name: Install backend dependencies
      run: cd backend && pip install -r requirements.txt

    - name: Build backend
      run: cd backend && python manage.py collectstatic

    - name: Copy generated files to nginx directory
      run: |
        mkdir -p /tmp/staticfiles /tmp/frontendfiles
        cp frontend/dist/* /tmp/frontendfiles
        cp backend/staticfiles/* /tmp/staticfiles

    - name: Set Docker Tag
      id: set_tag
      run: echo "DOCKER_TAG=${GITHUB_SHA::8}" >> $GITHUB_ENV

    - name: Build nginx Docker image
      run: |
        docker build -t $ECR_REGISTRY/data-plumber-nginx:${DOCKER_TAG} -f nginx/Dockerfile .
        docker build -t $ECR_REGISTRY/data-plumber-backend:${DOCKER_TAG} -f backend/Dockerfile .

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1.7.0
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/data-plumber-github-actions-role
        role-session-name: GitHub_to_AWS_via_FederatedOIDC
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push images
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        docker push $ECR_REGISTRY/data-plumber-backend:${DOCKER_TAG}
        docker push $ECR_REGISTRY/data-plumber-nginx:${DOCKER_TAG}

    - name: Deploy to AWS CloudFormation
      uses: aws-actions/aws-cloudformation-github-deploy@v1
      with:
        name: data-plumber-stack
        template: cloudformation.yaml
        parameter-overrides: BackendContainerImage=${{ steps.login-ecr.outputs.registry }}/data-plumber-backend:${{ env.DOCKER_TAG }},NginxContainerImage=${{ steps.login-ecr.outputs.registry }}/data-plumber-nginx:${{ env.DOCKER_TAG }}
